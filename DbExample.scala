package kvp24_chat.db

import java.sql.{Connection, DriverManager, PreparedStatement, ResultSet, Statement}

object DbExample {

  def main(args: Array[String]): Unit = {
    createTable()
    addRow(new RowMessage("vasya","patya","musupermessage"))
    getAllMessages()
  }

  def createTable(): Unit = {
    // Установка соединения с базой данных
    Class.forName("org.hsqldb.jdbc.JDBCDriver")
    val connection: Connection = DriverManager.getConnection("jdbc:hsqldb:file:./app/src/main/scala/kvp24_chat/db/chatDb", "SA", "")

    // Создание таблицы
    val statement: Statement = connection.createStatement()
    val createTableQuery: String =
      "CREATE TABLE IF NOT EXISTS MESSAGES (" +
        "id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL," +
        "from_user varchar(255) NOT NULL," +
        "to_user varchar(255) NOT NULL," +
        "message varchar(255) NOT NULL," +
        "PRIMARY KEY (id)" +
        ")"
    statement.executeUpdate(createTableQuery)

    // Закрытие соединения
    statement.close()
    connection.close()
  }

  def addRow(message: RowMessage): Unit = {

    // Установка соединения с базой данных
    Class.forName("org.hsqldb.jdbc.JDBCDriver")
    val connection: Connection = DriverManager.getConnection("jdbc:hsqldb:file:./app/src/main/scala/kvp24_chat/db/chatDb", "SA", "")

    val insertQuery: String = "INSERT INTO MESSAGES (from_user, to_user, message) VALUES (?, ?, ?)"
    val preparedStatement: PreparedStatement = connection.prepareStatement(insertQuery)
    //preparedStatement.setInt(1, message.id)
    preparedStatement.setString(1, message.fromUser)
    preparedStatement.setString(2, message.toUser)
    preparedStatement.setString(3, message.message)
    preparedStatement.executeUpdate()
    preparedStatement.close()
    connection.close()
  }

  def getAllMessages(): List[RowMessage] = {
    // Установка соединения с базой данных
    Class.forName("org.hsqldb.jdbc.JDBCDriver")
    val connection: Connection = DriverManager.getConnection("jdbc:hsqldb:file:./app/src/main/scala/kvp24_chat/db/chatDb", "SA", "")

    val selectQuery: String = "SELECT * FROM MESSAGES"
    val statement: Statement = connection.createStatement()
    val resultSet: ResultSet = statement.executeQuery(selectQuery)

    var messages: List[RowMessage] = List.empty[RowMessage]
    while (resultSet.next())
    {
      val fromUser: String = resultSet.getString("from_user")
      val toUser: String = resultSet.getString("to_user")
      val message: String = resultSet.getString("message")
      val rowMessage = RowMessage(fromUser, toUser, message)

      messages = messages :+rowMessage //messages = messages ::: List(rowMessage)
    }

    resultSet.close()
    statement.close()
    connection.close()

    println("messages_size=="+messages.size)
    println("messages_size=="+messages)
    return messages
  }


}
case class RowMessage(/*id: Int,*/ fromUser: String, toUser: String, message: String)

